// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eGym.DAL;

#nullable disable

namespace eGym.DAL.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20230514145254_AddMoreSeeds")]
    partial class AddMoreSeeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eGym.Domain.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9161),
                            Email = "user@test.com",
                            FirstName = "user",
                            Gender = 1,
                            LastName = "user",
                            Password = "test",
                            Role = 2,
                            Username = "user"
                        },
                        new
                        {
                            AccountId = 2,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9194),
                            Email = "lejla@husrep.com",
                            FirstName = "Lejla",
                            Gender = 1,
                            LastName = "Husrep",
                            Password = "lejlah123",
                            Role = 2,
                            Username = "lejlah"
                        },
                        new
                        {
                            AccountId = 3,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9196),
                            Email = "dino@pelic.com",
                            FirstName = "Dino",
                            Gender = 0,
                            LastName = "Pelic",
                            Password = "dinop123",
                            Role = 2,
                            Username = "dinop"
                        },
                        new
                        {
                            AccountId = 4,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9198),
                            Email = "amar@sehic.com",
                            FirstName = "Amar",
                            Gender = 0,
                            LastName = "Sehic",
                            Password = "amars123",
                            Role = 2,
                            Username = "amars"
                        },
                        new
                        {
                            AccountId = 5,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9201),
                            Email = "hana@babic.com",
                            FirstName = "Hana",
                            Gender = 1,
                            LastName = "Babic",
                            Password = "hanab123",
                            Role = 2,
                            Username = "hanab"
                        },
                        new
                        {
                            AccountId = 6,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9203),
                            Email = "faris@kovacevic.com",
                            FirstName = "Faris",
                            Gender = 0,
                            LastName = "Kovacevic",
                            Password = "farisk123",
                            Role = 2,
                            Username = "farisk"
                        },
                        new
                        {
                            AccountId = 7,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9231),
                            Email = "arnesa@letica.com",
                            FirstName = "Arnesa",
                            Gender = 1,
                            LastName = "Letica",
                            Password = "arnesal123",
                            Role = 2,
                            Username = "arnesal"
                        },
                        new
                        {
                            AccountId = 8,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9235),
                            Email = "envera@dedic.com",
                            FirstName = "Envera",
                            Gender = 1,
                            LastName = "Dedic",
                            Password = "enverad123",
                            Role = 2,
                            Username = "enverad"
                        },
                        new
                        {
                            AccountId = 9,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9236),
                            Email = "edis@zebic.com",
                            FirstName = "Edis",
                            Gender = 0,
                            LastName = "Zebic",
                            Password = "edisz123",
                            Role = 2,
                            Username = "edisz"
                        },
                        new
                        {
                            AccountId = 10,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9238),
                            Email = "dino@buric.com",
                            FirstName = "Dino",
                            Gender = 1,
                            LastName = "Buric",
                            Password = "dinob123",
                            Role = 2,
                            Username = "dinob"
                        });
                });

            modelBuilder.Entity("eGym.Domain.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("eGym.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CardId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("eGym.Domain.Diet", b =>
                {
                    b.Property<int>("DietId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Meal")
                        .HasColumnType("int");

                    b.HasKey("DietId");

                    b.HasIndex("AccountId");

                    b.ToTable("Diet");

                    b.HasData(
                        new
                        {
                            DietId = 1,
                            AccountId = 1,
                            Day = 44,
                            Description = "Eggs and dairy",
                            Meal = 1
                        },
                        new
                        {
                            DietId = 2,
                            AccountId = 1,
                            Day = 44,
                            Description = "Grilled chicken and salad",
                            Meal = 2
                        },
                        new
                        {
                            DietId = 3,
                            AccountId = 1,
                            Day = 40,
                            Description = "Protein shake",
                            Meal = 3
                        },
                        new
                        {
                            DietId = 4,
                            AccountId = 3,
                            Day = 40,
                            Description = "Grilled chicken and salad",
                            Meal = 2
                        },
                        new
                        {
                            DietId = 5,
                            AccountId = 3,
                            Day = 36,
                            Description = "Protein shake",
                            Meal = 3
                        },
                        new
                        {
                            DietId = 6,
                            AccountId = 5,
                            Day = 36,
                            Description = "Grilled chicken and salad",
                            Meal = 2
                        },
                        new
                        {
                            DietId = 7,
                            AccountId = 7,
                            Day = 33,
                            Description = "Pasta with chicken and green salad",
                            Meal = 2
                        },
                        new
                        {
                            DietId = 8,
                            AccountId = 8,
                            Day = 33,
                            Description = "Eggs and dairy",
                            Meal = 1
                        },
                        new
                        {
                            DietId = 9,
                            AccountId = 8,
                            Day = 31,
                            Description = "Pasta with chicken and green salad",
                            Meal = 2
                        },
                        new
                        {
                            DietId = 10,
                            AccountId = 8,
                            Day = 31,
                            Description = "Protein shake",
                            Meal = 3
                        });
                });

            modelBuilder.Entity("eGym.Domain.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9365),
                            Email = "desktop@test.com",
                            FirstName = "desktop",
                            Gender = 1,
                            LastName = "desktop",
                            Password = "test",
                            Role = 0,
                            Username = "desktop"
                        },
                        new
                        {
                            EmployeeId = 2,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9369),
                            Email = "mobile@test.com",
                            FirstName = "mobile",
                            Gender = 1,
                            LastName = "mobile",
                            Password = "test",
                            Role = 0,
                            Username = "mobile"
                        },
                        new
                        {
                            EmployeeId = 3,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9371),
                            Email = "employee@test.com",
                            FirstName = "employee",
                            Gender = 1,
                            LastName = "employee",
                            Password = "test",
                            Role = 1,
                            Username = "employee"
                        },
                        new
                        {
                            EmployeeId = 4,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9373),
                            Email = "nejla@hindic.com",
                            FirstName = "Nejla",
                            Gender = 1,
                            LastName = "Hindic",
                            Password = "nejla123",
                            Role = 1,
                            Username = "nejlah"
                        },
                        new
                        {
                            EmployeeId = 5,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9375),
                            Email = "daris@hindic.com",
                            FirstName = "Daris",
                            Gender = 0,
                            LastName = "Hindic",
                            Password = "daris123",
                            Role = 1,
                            Username = "darish"
                        },
                        new
                        {
                            EmployeeId = 6,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9377),
                            Email = "edi@muratovic.com",
                            FirstName = "Edi",
                            Gender = 0,
                            LastName = "Muratovic",
                            Password = "edi123",
                            Role = 2,
                            Username = "edim"
                        },
                        new
                        {
                            EmployeeId = 7,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9382),
                            Email = "emira@cilic.com",
                            FirstName = "Emira",
                            Gender = 1,
                            LastName = "Cilic",
                            Password = "emira123",
                            Role = 0,
                            Username = "emiram"
                        },
                        new
                        {
                            EmployeeId = 8,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9384),
                            Email = "edin@mesic.com",
                            FirstName = "Edin",
                            Gender = 0,
                            LastName = "Mesic",
                            Password = "edin123",
                            Role = 2,
                            Username = "edin"
                        },
                        new
                        {
                            EmployeeId = 9,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9386),
                            Email = "amina@selimovic.com",
                            FirstName = "Amina",
                            Gender = 1,
                            LastName = "Selimovic",
                            Password = "amina123",
                            Role = 2,
                            Username = "aminas"
                        },
                        new
                        {
                            EmployeeId = 10,
                            BirthDate = new DateTime(2023, 5, 14, 16, 52, 54, 301, DateTimeKind.Local).AddTicks(9388),
                            Email = "sara@zukic.com",
                            FirstName = "Sara",
                            Gender = 1,
                            LastName = "Zukic",
                            Password = "sara123",
                            Role = 1,
                            Username = "saraz"
                        });
                });

            modelBuilder.Entity("eGym.Domain.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Employees")
                        .HasColumnType("int");

                    b.Property<int>("Equipment")
                        .HasColumnType("int");

                    b.Property<int>("ServiceQuality")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = 1,
                            AccountId = 1,
                            Comment = "Amazing personal trainers and complete, clean gym.",
                            Employees = 1,
                            Equipment = 5,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 2,
                            AccountId = 2,
                            Comment = "Very friendly team who make me actually want to go train.",
                            Employees = 2,
                            Equipment = 5,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 3,
                            AccountId = 3,
                            Comment = "This is the worst fitness class I have ever attended.",
                            Employees = 4,
                            Equipment = 1,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 4,
                            AccountId = 5,
                            Comment = "Excellent personal training.",
                            Employees = 5,
                            Equipment = 5,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 5,
                            AccountId = 4,
                            Comment = "I had a bad experience with them. Not motivating at all.",
                            Employees = 6,
                            Equipment = 1,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 6,
                            AccountId = 3,
                            Comment = "Amazing personal trainers and complete, clean gym.",
                            Employees = 7,
                            Equipment = 5,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 7,
                            AccountId = 7,
                            Comment = "Excellent personal training.",
                            Employees = 7,
                            Equipment = 5,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 8,
                            AccountId = 8,
                            Comment = "The gym is very modern and clean.",
                            Employees = 3,
                            Equipment = 4,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 9,
                            AccountId = 8,
                            Comment = "This is the worst fitness class I have ever attended.",
                            Employees = 8,
                            Equipment = 2,
                            ServiceQuality = 0
                        },
                        new
                        {
                            FeedbackId = 10,
                            AccountId = 9,
                            Comment = "The instructor doesn’t seem very prepared for class.",
                            Employees = 9,
                            Equipment = 2,
                            ServiceQuality = 0
                        });
                });

            modelBuilder.Entity("eGym.Domain.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("CCV")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("eGym.Domain.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationId");

                    b.HasIndex("AccountId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            AccountId = 1,
                            Description = "I would like to do weight training.",
                            EmployeeId = 3,
                            From = new DateTime(2023, 5, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 0,
                            Status = 1,
                            To = new DateTime(2023, 5, 9, 13, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 2,
                            AccountId = 2,
                            Description = "I would like to do cardio.",
                            EmployeeId = 5,
                            From = new DateTime(2023, 5, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 1,
                            Status = 2,
                            To = new DateTime(2023, 5, 9, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 3,
                            AccountId = 3,
                            Description = "Another description.",
                            EmployeeId = 4,
                            From = new DateTime(2023, 5, 9, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 3,
                            Status = 2,
                            To = new DateTime(2023, 5, 9, 17, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 4,
                            AccountId = 1,
                            Description = "I would like to do strength training.",
                            EmployeeId = 5,
                            From = new DateTime(2023, 5, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 0,
                            Status = 3,
                            To = new DateTime(2023, 5, 9, 13, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 5,
                            AccountId = 4,
                            Description = "I want to dedicate more to this training.",
                            EmployeeId = 9,
                            From = new DateTime(2023, 5, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 1,
                            Status = 4,
                            To = new DateTime(2023, 5, 9, 18, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 6,
                            AccountId = 6,
                            Description = "Some description.",
                            EmployeeId = 7,
                            From = new DateTime(2023, 5, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 2,
                            Status = 2,
                            To = new DateTime(2023, 5, 9, 20, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 7,
                            AccountId = 3,
                            Description = "I would like to do full-body workouts. ",
                            EmployeeId = 10,
                            From = new DateTime(2023, 5, 11, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 1,
                            Status = 1,
                            To = new DateTime(2023, 5, 11, 14, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 8,
                            AccountId = 8,
                            Description = "I would like to do pilates training.",
                            EmployeeId = 9,
                            From = new DateTime(2023, 5, 12, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 3,
                            Status = 4,
                            To = new DateTime(2023, 5, 12, 17, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 9,
                            AccountId = 7,
                            Description = "I would like to do balance and stability training.",
                            EmployeeId = 6,
                            From = new DateTime(2023, 5, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 3,
                            Status = 3,
                            To = new DateTime(2023, 5, 12, 21, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 10,
                            AccountId = 5,
                            Description = "I would like to do flexibility and mobility Training.",
                            EmployeeId = 1,
                            From = new DateTime(2023, 5, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationType = 2,
                            Status = 3,
                            To = new DateTime(2023, 5, 13, 14, 15, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eGym.Domain.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Descritption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            Descritption = "We make sure that we have all the equipment necessary for a fantastic workout no matter what your style may be.",
                            Picture = "https://media-cdn.tripadvisor.com/media/photo-s/1a/03/58/f5/hotel-gym-fully-equipped.jpg",
                            Title = "Top of the line equipment"
                        },
                        new
                        {
                            ServiceId = 2,
                            Descritption = "Whether you are a seasoned spinner, an avid road biker or just eager to test out a class for the first time, spinning has you covered.",
                            Picture = "https://media1.popsugar-assets.com/files/thumbor/qSZhRw034Sm7XOwQxoPl9fF8AWY/fit-in/2048xorig/filters:format_auto-!!-:strip_icc-!!-/2016/07/05/076/n/1922729/917070f5052411b5_CyclingRendering_2048x1000.jpg",
                            Title = "Spinning studio"
                        },
                        new
                        {
                            ServiceId = 3,
                            Descritption = "Zumba is a dance based workout.",
                            Picture = "https://thebridge.in/wp-content/uploads/2020/07/Untitled-design-16.jpg",
                            Title = "Zumba aerobics"
                        },
                        new
                        {
                            ServiceId = 4,
                            Descritption = "Functional training has become one of the trendiest most effective workouts possible.",
                            Picture = "https://www.fitness-world.in/wp-content/uploads/2019/02/5-Steps-to-Create-a-Functional-Training-Space-for-Your-Commercial-Gym.jpg",
                            Title = "Functional training area"
                        },
                        new
                        {
                            ServiceId = 5,
                            Descritption = "Functional training has become one of the trendiest most effective workouts possible.",
                            Picture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRQwG8rLtLoDGo-Pz90RVmjVKCWAonfquCQAQ&usqp=CAU",
                            Title = "Plyometric boxes"
                        },
                        new
                        {
                            ServiceId = 6,
                            Descritption = "We have a special section reserved and accessed by only women.",
                            Picture = "https://media.self.com/photos/59a5e9e3912f8b75cea00743/4:3/w_2560%2Cc_limit/GettyImages-583690235.jpg",
                            Title = "Women's only studio"
                        },
                        new
                        {
                            ServiceId = 7,
                            Descritption = "This luxury amenity is very popular amongst our clients.",
                            Picture = "https://eliteclubs.com/wp-content/uploads/2019/11/Locker-Room-Dry-Cedar-Sauna-e1569515106806.jpg",
                            Title = "Steam and sauna rooms"
                        },
                        new
                        {
                            ServiceId = 8,
                            Descritption = "Yoga practice is a great way to strengthen the bond between your mind and your body.",
                            Picture = "https://fitnessandwellnessnews.com/wp-content/uploads/2016/07/Yoga-class-stretch-pic.jpg",
                            Title = "Yoga classes"
                        },
                        new
                        {
                            ServiceId = 9,
                            Descritption = "We have group fitness classes all week long and throughout the day.",
                            Picture = "https://www.ideafit.com/wp-content/uploads/files/Fitness%20Class%20Participation.jpg",
                            Title = "Aerobics classes"
                        },
                        new
                        {
                            ServiceId = 10,
                            Descritption = "Our personal trainers are here to help all members seeking to make the most out of their workouts. ",
                            Picture = "https://content.active.com/Assets/Active.com+Content+Site+Digital+Assets/Fitness/Articles/Personal+Trainer/personal+trainer-carousel.jpg",
                            Title = "Personal training"
                        });
                });

            modelBuilder.Entity("eGym.Domain.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingId");

                    b.HasIndex("AccountId");

                    b.ToTable("Training");

                    b.HasData(
                        new
                        {
                            TrainingId = 1,
                            AccountId = 1,
                            Day = 44,
                            Description = "Barbell bench press, 5 sets, 12 reps"
                        },
                        new
                        {
                            TrainingId = 2,
                            AccountId = 1,
                            Day = 44,
                            Description = "Dumbbell shoulder press, 5 sets, 10 reps"
                        },
                        new
                        {
                            TrainingId = 4,
                            AccountId = 3,
                            Day = 40,
                            Description = "Floor press, 4 sets, 10 reps "
                        },
                        new
                        {
                            TrainingId = 5,
                            AccountId = 3,
                            Day = 36,
                            Description = "Flexibility and stretching"
                        },
                        new
                        {
                            TrainingId = 6,
                            AccountId = 5,
                            Day = 36,
                            Description = "Hammer Curls, 5 sets, 8 reps"
                        },
                        new
                        {
                            TrainingId = 7,
                            AccountId = 7,
                            Day = 33,
                            Description = "Incline bench press, 3 sets, 12 reps"
                        },
                        new
                        {
                            TrainingId = 8,
                            AccountId = 8,
                            Day = 33,
                            Description = "Close grip lat pulldown, 3 sets, 10 reps"
                        },
                        new
                        {
                            TrainingId = 9,
                            AccountId = 8,
                            Day = 31,
                            Description = "Leg raises, 3 sets, 10 reps"
                        },
                        new
                        {
                            TrainingId = 10,
                            AccountId = 8,
                            Day = 31,
                            Description = "Seated rows, 4 sets, 10 reps"
                        });
                });

            modelBuilder.Entity("eGym.Domain.Customer", b =>
                {
                    b.HasOne("eGym.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Domain.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("eGym.Domain.Diet", b =>
                {
                    b.HasOne("eGym.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("eGym.Domain.Feedback", b =>
                {
                    b.HasOne("eGym.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("eGym.Domain.Payment", b =>
                {
                    b.HasOne("eGym.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Domain.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.Navigation("Customer");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("eGym.Domain.Reservation", b =>
                {
                    b.HasOne("eGym.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("eGym.Domain.Training", b =>
                {
                    b.HasOne("eGym.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
